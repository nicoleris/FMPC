clc
clear all
close all

%% Part 2
quad = Quad();
[xs,us] = quad.trim(); % Compute steady-state for which 0 = f(xs,us)
sys = quad.linearize(xs, us); % Linearize the nonlinear model
sys_transformed = sys * inv(quad.T); % New system is A * x + B * inv(T) * v
[sys_x, sys_y, sys_z, sys_yaw] = quad.decompose(sys, xs, us);

%% Part 3
% discrete_system = c2d(sys, 1/5);
x = [1; 0; 0; 0];
Ts = 1/5;
quad = Quad(Ts);
[xs, us] = quad.trim();
sys = quad.linearize(xs, us);
[sys_x, sys_y, sys_z, sys_yaw] = quad.decompose(sys, xs, us);
% Design MPC controller
mpc_x = MPC_Control_x(sys_x, Ts);
% Get control inputs with
ux = mpc_x.get_u(x);



